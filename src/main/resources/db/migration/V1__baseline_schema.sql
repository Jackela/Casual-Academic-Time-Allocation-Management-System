-- Simplified CATAMS schema: single authoritative definition for all environments.
-- Designed to be portable across PostgreSQL and H2 for local testing.

CREATE TABLE users (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email_value VARCHAR(254) NOT NULL UNIQUE,
    name VARCHAR(100) NOT NULL,
    hashed_password VARCHAR(255) NOT NULL,
    role VARCHAR(20) NOT NULL,
    is_active BOOLEAN NOT NULL DEFAULT TRUE,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    last_login_at TIMESTAMP
);

CREATE TABLE courses (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    code_value VARCHAR(20) NOT NULL UNIQUE,
    name VARCHAR(200) NOT NULL,
    semester VARCHAR(50) NOT NULL,
    lecturer_id BIGINT NOT NULL,
    budget_allocated DECIMAL(12,2) NOT NULL CHECK (budget_allocated >= 0),
    budget_allocated_currency VARCHAR(3) NOT NULL DEFAULT 'AUD',
    budget_used DECIMAL(12,2) NOT NULL DEFAULT 0 CHECK (budget_used >= 0),
    budget_used_currency VARCHAR(3) NOT NULL DEFAULT 'AUD',
    is_active BOOLEAN NOT NULL DEFAULT TRUE,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT chk_courses_budget_usage CHECK (budget_used <= budget_allocated),
    CONSTRAINT fk_courses_lecturer FOREIGN KEY (lecturer_id) REFERENCES users(id)
);
CREATE INDEX idx_course_lecturer ON courses(lecturer_id);
CREATE INDEX idx_course_active ON courses(is_active);

CREATE TABLE timesheets (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    tutor_id BIGINT NOT NULL,
    course_id BIGINT NOT NULL,
    week_start_date DATE NOT NULL,
    session_date DATE NOT NULL,
    hours DECIMAL(3,1) NOT NULL,
    hourly_rate DECIMAL(5,2) NOT NULL,
    hourly_rate_currency VARCHAR(3) NOT NULL DEFAULT 'AUD',
    description VARCHAR(1000) NOT NULL,
    task_type VARCHAR(20) NOT NULL DEFAULT 'OTHER',
    is_repeat BOOLEAN NOT NULL DEFAULT FALSE,
    qualification VARCHAR(20) NOT NULL DEFAULT 'STANDARD',
    delivery_hours DECIMAL(3,1) NOT NULL DEFAULT 0,
    associated_hours DECIMAL(3,1) NOT NULL DEFAULT 0,
    calculated_amount DECIMAL(9,2) NOT NULL DEFAULT 0,
    rate_code VARCHAR(20),
    calculation_formula VARCHAR(255),
    clause_reference VARCHAR(64),
    status VARCHAR(50) NOT NULL DEFAULT 'DRAFT',
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT NOT NULL,
    CONSTRAINT uk_timesheet_tutor_course_week UNIQUE (tutor_id, course_id, week_start_date),
    CONSTRAINT fk_timesheet_tutor FOREIGN KEY (tutor_id) REFERENCES users(id),
    CONSTRAINT fk_timesheet_course FOREIGN KEY (course_id) REFERENCES courses(id),
    CONSTRAINT fk_timesheet_creator FOREIGN KEY (created_by) REFERENCES users(id),
    CONSTRAINT chk_timesheet_hours CHECK (hours >= 0.1 AND hours <= 40.0),
    CONSTRAINT chk_timesheet_delivery_hours CHECK (delivery_hours >= 0 AND delivery_hours <= 40.0),
    CONSTRAINT chk_timesheet_associated_hours CHECK (associated_hours >= 0),
    CONSTRAINT chk_timesheet_status CHECK (status IN (
        'DRAFT',
        'PENDING_TUTOR_CONFIRMATION',
        'TUTOR_CONFIRMED',
        'LECTURER_CONFIRMED',
        'FINAL_CONFIRMED',
        'REJECTED',
        'MODIFICATION_REQUESTED'
    )),
    CONSTRAINT chk_timesheet_qualification CHECK (qualification IN ('STANDARD','PHD','COORDINATOR')),
    CONSTRAINT chk_timesheet_task_type CHECK (task_type IN ('LECTURE','TUTORIAL','ORAA','DEMO','MARKING','OTHER'))
);
CREATE INDEX idx_timesheet_tutor ON timesheets(tutor_id);
CREATE INDEX idx_timesheet_course ON timesheets(course_id);
CREATE INDEX idx_timesheet_status ON timesheets(status);
CREATE INDEX idx_timesheet_session_date ON timesheets(session_date);
CREATE INDEX idx_timesheet_created_by ON timesheets(created_by);

CREATE TABLE approvals (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    timesheet_id BIGINT NOT NULL,
    approver_id BIGINT NOT NULL,
    action VARCHAR(50) NOT NULL,
    previous_status VARCHAR(50) NOT NULL,
    new_status VARCHAR(50) NOT NULL,
    comment VARCHAR(500),
    timestamp TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    is_active BOOLEAN NOT NULL DEFAULT TRUE,
    CONSTRAINT fk_approval_timesheet FOREIGN KEY (timesheet_id) REFERENCES timesheets(id) ON DELETE CASCADE,
    CONSTRAINT fk_approval_approver FOREIGN KEY (approver_id) REFERENCES users(id) ON DELETE CASCADE
);
CREATE INDEX idx_approval_timesheet ON approvals(timesheet_id);
CREATE INDEX idx_approval_approver ON approvals(approver_id);
CREATE INDEX idx_approval_timestamp ON approvals(timestamp);
CREATE INDEX idx_approval_timesheet_timestamp_desc ON approvals(timesheet_id, timestamp DESC);

CREATE TABLE tutor_assignments (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    tutor_id BIGINT NOT NULL,
    course_id BIGINT NOT NULL,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT uq_tutor_assignment UNIQUE (tutor_id, course_id),
    CONSTRAINT fk_tutor_assignment_tutor FOREIGN KEY (tutor_id) REFERENCES users(id) ON DELETE CASCADE,
    CONSTRAINT fk_tutor_assignment_course FOREIGN KEY (course_id) REFERENCES courses(id) ON DELETE CASCADE
);
CREATE INDEX idx_tutor_assignment_tutor ON tutor_assignments(tutor_id);
CREATE INDEX idx_tutor_assignment_course ON tutor_assignments(course_id);

CREATE TABLE tutor_profile_defaults (
    tutor_id BIGINT PRIMARY KEY,
    default_qualification VARCHAR(32) NOT NULL DEFAULT 'STANDARD',
    CONSTRAINT fk_tutor_profile_defaults_user FOREIGN KEY (tutor_id) REFERENCES users(id) ON DELETE CASCADE
);

CREATE TABLE policy_version (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ea_reference VARCHAR(150) NOT NULL,
    major_version INTEGER NOT NULL,
    minor_version INTEGER NOT NULL,
    effective_from DATE NOT NULL,
    effective_to DATE,
    source_document_url TEXT NOT NULL,
    notes TEXT,
    CONSTRAINT uq_policy_reference_version UNIQUE (ea_reference, major_version, minor_version)
);

CREATE TABLE rate_code (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    code VARCHAR(16) NOT NULL UNIQUE,
    task_type VARCHAR(20) NOT NULL,
    description TEXT NOT NULL,
    default_associated_hours NUMERIC(5,2) NOT NULL DEFAULT 0,
    default_delivery_hours NUMERIC(5,2) NOT NULL DEFAULT 0,
    requires_phd BOOLEAN NOT NULL DEFAULT FALSE,
    is_repeatable BOOLEAN NOT NULL DEFAULT FALSE,
    ea_clause_reference VARCHAR(64)
);

CREATE TABLE rate_amount (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    rate_code_id BIGINT NOT NULL,
    policy_version_id BIGINT NOT NULL,
    year_label VARCHAR(16) NOT NULL,
    effective_from DATE NOT NULL,
    effective_to DATE,
    hourly_amount_aud NUMERIC(10,2) NOT NULL,
    max_associated_hours NUMERIC(5,2) NOT NULL DEFAULT 0,
    max_payable_hours NUMERIC(5,2) NOT NULL DEFAULT 0,
    qualification VARCHAR(20),
    notes TEXT,
    CONSTRAINT fk_rate_amount_rate_code FOREIGN KEY (rate_code_id) REFERENCES rate_code(id) ON DELETE CASCADE,
    CONSTRAINT fk_rate_amount_policy_version FOREIGN KEY (policy_version_id) REFERENCES policy_version(id) ON DELETE CASCADE
);
CREATE INDEX idx_rate_amount_rate_code ON rate_amount(rate_code_id);
CREATE INDEX idx_rate_amount_policy_version ON rate_amount(policy_version_id);

-- Minimal seed data for policy_version / rate_code to align with Schedule 1 defaults.
INSERT INTO policy_version (ea_reference, major_version, minor_version, effective_from, source_document_url, notes)
SELECT 'EA-2023-2026-Schedule-1', 2023, 0, DATE '2022-07-01',
       'docs/requirements/University-of-Sydney-Enterprise-Agreement-2023-2026.pdf',
       'Seeded Schedule 1 catalogue for casual academic rates.'
WHERE NOT EXISTS (
    SELECT 1 FROM policy_version
    WHERE ea_reference = 'EA-2023-2026-Schedule-1'
      AND major_version = 2023
      AND minor_version = 0
);

INSERT INTO rate_code (code, task_type, description, default_associated_hours, default_delivery_hours, requires_phd, is_repeatable, ea_clause_reference)
SELECT code, task_type, description, default_associated_hours, default_delivery_hours, requires_phd, is_repeatable, ea_clause_reference
FROM ( VALUES
    ('TU2', 'TUTORIAL', 'Tutorial rate – standard eligibility', 2.00, 1.00, FALSE, FALSE, 'Schedule 1 – Tutoring'),
    ('TU4', 'TUTORIAL', 'Repeat tutorial – standard eligibility', 1.00, 1.00, FALSE, TRUE, 'Schedule 1 – Tutoring')
) AS seed(code, task_type, description, default_associated_hours, default_delivery_hours, requires_phd, is_repeatable, ea_clause_reference)
WHERE NOT EXISTS (
    SELECT 1 FROM rate_code rc WHERE rc.code = seed.code
);

INSERT INTO rate_amount (rate_code_id, policy_version_id, year_label, effective_from, effective_to,
                         hourly_amount_aud, max_associated_hours, max_payable_hours, qualification, notes)
SELECT
    rc.id,
    pv.id,
    '2024-07',
    DATE '2024-07-01',
    DATE '2025-06-30',
    CASE rc.code WHEN 'TU2' THEN 87.97 ELSE 58.32 END,
    rc.default_associated_hours,
    rc.default_delivery_hours + rc.default_associated_hours,
    'STANDARD',
    'Baseline tutorial rate seed'
FROM rate_code rc
CROSS JOIN policy_version pv
WHERE rc.code IN ('TU2','TU4')
  AND pv.ea_reference = 'EA-2023-2026-Schedule-1'
  AND pv.major_version = 2023
  AND pv.minor_version = 0
  AND NOT EXISTS (
      SELECT 1 FROM rate_amount ra
      WHERE ra.rate_code_id = rc.id
        AND ra.policy_version_id = pv.id
        AND ra.year_label = '2024-07'
  );
