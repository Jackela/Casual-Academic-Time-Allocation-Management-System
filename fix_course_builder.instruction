# BMAD Instruction: Fix Course Entity isActive Field Validation

## Objective
Fix Course entity validation failures by adding missing `setIsActive(true)` calls after `new Course()` instantiation in test files.

## Problem Context
The Course entity has a new `@NotNull` field `isActive`. Test files using the default constructor `new Course()` fail validation because this field is not set. Files using parameterized constructors are unaffected as they auto-set `isActive = true`.

## Fix Pattern
After every `new Course()` instantiation that lacks a subsequent `setIsActive()` call, insert:
```java
course.setIsActive(true);
```

## Insertion Rules
1. **ONLY** target `new Course()` (default constructor) patterns
2. **IGNORE** `new Course(...)` (parameterized constructor) patterns  
3. **SKIP** if `setIsActive()` already exists within 10 lines after `new Course()`
4. Insert `setIsActive(true)` immediately after the assignment line
5. Use the same variable name as the assignment target
6. Match existing indentation

## Target File Patterns
- `src/test/java/**/*Test.java`
- `src/test/java/**/*Integration*.java`
- Test data builders and utility classes

## Expected Transformations

### Pattern 1: Direct Assignment
**Before:**
```java
course = new Course();
course.setCode("COMP1001");
```
**After:**
```java
course = new Course();
course.setIsActive(true);
course.setCode("COMP1001");
```

### Pattern 2: Variable Declaration
**Before:**
```java
Course course = new Course();
course.setName("Test Course");
```
**After:**
```java
Course course = new Course();
course.setIsActive(true);
course.setName("Test Course");
```

### Pattern 3: Method Helper
**Before:**
```java
private Course createCourse() {
    Course course = new Course();
    course.setCode(code);
    return course;
}
```
**After:**
```java
private Course createCourse() {
    Course course = new Course();
    course.setIsActive(true);
    course.setCode(code);
    return course;
}
```

## Validation
- Ensure no duplicate `setIsActive()` calls
- Verify indentation matches surrounding code
- Confirm variable names match exactly
- Check that only default constructor patterns are modified

## Files to Process
1. `src/test/java/com/usyd/catams/integration/LecturerApprovalWorkflowIntegrationTest.java`
2. `src/test/java/com/usyd/catams/integration/TimesheetUpdateDeleteIntegrationTest.java`
3. `src/test/java/com/usyd/catams/integration/DashboardControllerIntegrationTest.java`
4. `src/test/java/com/usyd/catams/service/DashboardServiceImplTest.java`
5. `src/test/java/com/usyd/catams/entity/CourseEntityTest.java`
6. `src/test/java/com/usyd/catams/entity/CourseTest.java`

## Success Criteria
- All Course entities created with default constructor have `isActive = true`
- Test validation failures for Course entities are resolved
- No code duplication or syntax errors introduced
- All test files can compile and run successfully