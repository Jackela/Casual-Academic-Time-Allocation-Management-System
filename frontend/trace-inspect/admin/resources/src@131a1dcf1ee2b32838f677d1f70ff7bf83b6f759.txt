import { type Locator, type Page } from '@playwright/test';
import { waitForEnabled, waitForVisible, waitForAdminUsersReady, waitForAppReady } from '../../utils/waits';

export class AdminUsersPage {
  constructor(private page: Page) {}

  get table(): Locator {
    return this.page.getByTestId('admin-users-table');
  }

  get createButton(): Locator {
    return this.page.getByTestId('admin-user-create-btn');
  }

  async openCreate(): Promise<void> {
    // Ensure route is ready before interacting
    await waitForAppReady(this.page, 'ADMIN');
    await waitForAdminUsersReady(this.page);
    await waitForEnabled(this.createButton);
    await this.createButton.click();
  }

  async createUser(input: { email: string; name: string; role: 'ADMIN'|'LECTURER'|'TUTOR'; password: string }): Promise<void> {
    await this.openCreate();
    await this.page.getByTestId('admin-user-email').fill(input.email);
    // Split name into first/last based on first space; fallback to full in firstName
    const [first, ...rest] = input.name.trim().split(/\s+/);
    const last = rest.join(' ');
    await this.page.getByLabel(/First Name/i).fill(first);
    await this.page.getByLabel(/Last Name/i).fill(last);
    await this.page.getByTestId('admin-user-password').fill(input.password);
    await this.page.getByTestId('admin-user-role').selectOption(input.role);
    await this.page.getByTestId('admin-user-submit').click();
  }

  async setQualification(userId: number, qualification: 'STANDARD'|'COORDINATOR'|'PHD'): Promise<void> {
    const row = await this.findUserRow(String(userId));
    const select = row.getByTestId('admin-user-qualification-select');
    await waitForEnabled(select);
    await select.selectOption(qualification);
  }

  async toggleActive(userId: number): Promise<void> {
    const row = await this.findUserRow(String(userId));
    const toggle = row.getByTestId('admin-user-activate-toggle');
    await waitForEnabled(toggle);
    await toggle.click();
  }

  async findUserRow(emailOrId: string): Promise<Locator> {
    await waitForVisible(this.table);
    return this.table.getByRole('row').filter({ hasText: emailOrId }).first();
  }
}

export default AdminUsersPage;
