# BMAD Context Template: Course Entity isActive Fix

## Pattern Matching Rules

### Primary Pattern: Variable Assignment
```regex
Pattern: ^(\s*)([a-zA-Z_][a-zA-Z0-9_]*)\s*=\s*new\s+Course\(\)\s*;
Capture Groups:
  $1 = indentation (whitespace)
  $2 = variable name
```

### Secondary Pattern: Variable Declaration  
```regex
Pattern: ^(\s*)(Course\s+)([a-zA-Z_][a-zA-Z0-9_]*)\s*=\s*new\s+Course\(\)\s*;
Capture Groups:
  $1 = indentation (whitespace)
  $2 = type declaration ("Course ")
  $3 = variable name
```

## Context Windows

### Before Context (Search Backward)
Look for these patterns within 10 lines before the match:
- `@Test` annotations
- Method signatures containing "test", "setup", "create"
- Class field declarations
- `@BeforeEach`, `@BeforeAll` annotations

### After Context (Search Forward)  
Check for these patterns within 10 lines after the match:
- Existing `setIsActive()` calls - **SKIP if found**
- Other setter method calls (`.set*()`)
- Method calls on the variable
- Repository save operations
- Return statements

## Insertion Logic

### Insertion Point
Insert immediately after the matched line:
```
MATCHED_LINE: course = new Course();
INSERT_HERE: course.setIsActive(true);
NEXT_LINE: course.setCode("COMP1001");
```

### Insertion Template
```java
${indentation}${variable_name}.setIsActive(true);
```

Where:
- `${indentation}` = captured group $1 (exact whitespace)
- `${variable_name}` = captured group $2 or $3 (variable name)

## Skip Conditions

### Skip Pattern 1: Already Has setIsActive
If found within 10 lines after the match:
```regex
${variable_name}\.setIsActive\(
```

### Skip Pattern 2: Parameterized Constructor
If the line matches:
```regex
new\s+Course\s*\([^)]+\)
```

### Skip Pattern 3: Inside Comments
If the match is within:
```regex
//.*new\s+Course\(\)
/\*.*new\s+Course\(\).*\*/
```

## File Type Validation
Only process files matching:
```regex
src/test/java/.*\.(java)$
```

## Advanced Context Matching

### Method Context Detection
Identify the containing method:
```regex
Backward Search: (public|private|protected)?\s*(static)?\s*\w+\s+(\w+)\s*\([^)]*\)\s*\{
Forward Search: ^\s*\}
```

### Class Context Detection  
Identify the containing class:
```regex
Backward Search: (public|private)?\s*class\s+(\w+)
```

### Import Validation
Ensure Course import exists:
```regex
import\s+.*\.Course\s*;
```

## Output Format
For each successful match, generate:
```yaml
file: "path/to/file.java"
line_number: 123
pattern_matched: "course = new Course();"
variable_name: "course"
indentation: "        "
insertion_line: "        course.setIsActive(true);"
context:
  method: "setUp"
  class: "LecturerApprovalWorkflowIntegrationTest"
  before: ["// Create test courses"]
  after: ["course.setCode(\"COMP1001\");"]
```

## Error Handling
- Log skipped matches with reasons
- Validate syntax after insertion
- Report any files that couldn't be processed
- Verify variable name consistency
- Check for duplicate insertions