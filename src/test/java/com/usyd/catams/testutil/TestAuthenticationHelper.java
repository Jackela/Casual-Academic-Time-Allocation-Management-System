package com.usyd.catams.testutil;

import com.usyd.catams.entity.User;
import com.usyd.catams.enums.UserRole;
import com.usyd.catams.security.JwtTokenProvider;
import com.usyd.catams.testdata.TestDataBuilder;
import org.springframework.test.web.servlet.request.RequestPostProcessor;

/**
 * Test authentication helper providing JWT-based authentication for integration tests.
 * 
 * This utility class provides methods to create authenticated requests using real JWT tokens
 * generated by the application's {@link JwtTokenProvider}. It supports all user roles and
 * provides both convenience methods for quick setup and detailed methods for specific scenarios.
 * 
 * <h3>Design by Contract (DbC):</h3>
 * <ul>
 *   <li><strong>Precondition:</strong> JwtTokenProvider must be available in test context</li>
 *   <li><strong>Postcondition:</strong> Generated tokens are valid and properly formatted</li>
 *   <li><strong>Invariant:</strong> All tokens include required claims (userId, email, role)</li>
 * </ul>
 * 
 * <h3>Security Compliance:</h3>
 * <ul>
 *   <li>Uses actual JWT tokens matching production authentication</li>
 *   <li>Proper Bearer token format in Authorization header</li>
 *   <li>Role-based access control (RBAC) support</li>
 *   <li>Integration test isolation through unique test emails</li>
 * </ul>
 * 
 * @author Integration Test Infrastructure
 * @since 1.0.0
 */
public class TestAuthenticationHelper {

    /**
     * Creates a RequestPostProcessor for admin authentication using JWT tokens.
     * 
     * @param jwtTokenProvider the JWT token provider from test context
     * @return RequestPostProcessor that adds Bearer token for admin user
     */
    public static RequestPostProcessor asAdmin(JwtTokenProvider jwtTokenProvider) {
        // Use fixed database ID (1L) that matches the ID assigned in TestUserSeedingService
        Long databaseId = 1L; // This matches the ID assigned in TestUserSeedingService
        String email = "admin@integration.test";
        
        String token = jwtTokenProvider.generateToken(
                databaseId,  // Use actual database ID
                email, 
                UserRole.ADMIN.name()
        );
        
        return request -> {
            request.addHeader("Authorization", "Bearer " + token);
            return request;
        };
    }

    /**
     * Creates a RequestPostProcessor for lecturer authentication with specific ID.
     * 
     * @param lecturerId the lecturer's unique identifier
     * @param jwtTokenProvider the JWT token provider from test context
     * @return RequestPostProcessor that adds Bearer token for lecturer user
     */
    public static RequestPostProcessor asLecturer(Long lecturerId, JwtTokenProvider jwtTokenProvider) {
        // Use fixed database ID (2L) but keep dynamic email pattern for compatibility
        Long databaseId = 2L; // This matches the ID assigned in TestUserSeedingService
        String email = "lecturer" + lecturerId + "@integration.test";
        
        String token = jwtTokenProvider.generateToken(
                databaseId,  // Use actual database ID 
                email, 
                UserRole.LECTURER.name()
        );
        
        return request -> {
            request.addHeader("Authorization", "Bearer " + token);
            return request;
        };
    }

    /**
     * Creates a RequestPostProcessor for tutor authentication with specific ID.
     * 
     * @param tutorId the tutor's unique identifier
     * @param jwtTokenProvider the JWT token provider from test context
     * @return RequestPostProcessor that adds Bearer token for tutor user
     */
    public static RequestPostProcessor asTutor(Long tutorId, JwtTokenProvider jwtTokenProvider) {
        // Use fixed database ID (3L) but keep dynamic email pattern for compatibility
        Long databaseId = 3L; // This matches the ID assigned in TestUserSeedingService
        String email = "tutor" + tutorId + "@integration.test";
        
        String token = jwtTokenProvider.generateToken(
                databaseId,  // Use actual database ID
                email, 
                UserRole.TUTOR.name()
        );
        
        return request -> {
            request.addHeader("Authorization", "Bearer " + token);
            return request;
        };
    }

    /**
     * Creates a RequestPostProcessor for authentication with a specific User entity.
     * This method provides maximum flexibility for complex test scenarios.
     * 
     * @param user the user entity to authenticate as
     * @param jwtTokenProvider the JWT token provider from test context
     * @return RequestPostProcessor that adds Bearer token for the specified user
     */
    public static RequestPostProcessor asUser(User user, JwtTokenProvider jwtTokenProvider) {
        String token = jwtTokenProvider.generateToken(
                user.getId(), 
                user.getEmail(), 
                user.getRole().name()
        );
        
        return request -> {
            request.addHeader("Authorization", "Bearer " + token);
            return request;
        };
    }

    /**
     * Creates a RequestPostProcessor that simulates an unauthenticated request.
     * Useful for testing authentication requirements and unauthorized access scenarios.
     * 
     * @return RequestPostProcessor that adds no authentication headers
     */
    public static RequestPostProcessor asUnauthenticated() {
        return request -> request; // No authentication headers
    }

    /**
     * Creates a RequestPostProcessor with an invalid JWT token.
     * Useful for testing JWT validation and error handling.
     * 
     * @return RequestPostProcessor that adds an invalid Bearer token
     */
    public static RequestPostProcessor withInvalidToken() {
        return request -> {
            request.addHeader("Authorization", "Bearer invalid.jwt.token");
            return request;
        };
    }

    /**
     * Generates a raw JWT token for direct use in tests (without RequestPostProcessor).
     * Useful for REST template based tests or when you need the token value directly.
     * 
     * @param userId the user's unique identifier
     * @param email the user's email address
     * @param role the user's role
     * @param jwtTokenProvider the JWT token provider from test context
     * @return formatted Bearer token string (includes "Bearer " prefix)
     */
    public static String generateBearerToken(Long userId, String email, UserRole role, JwtTokenProvider jwtTokenProvider) {
        String token = jwtTokenProvider.generateToken(userId, email, role.name());
        return "Bearer " + token;
    }
}



