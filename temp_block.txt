  async refreshDashboard() {
    const refreshButton = this.page.getByRole('button', { name: /Refresh/i });
    if (await refreshButton.isVisible().catch(() => false)) {
      await Promise.all([
        this.page.waitForLoadState('networkidle').catch(() => undefined),
        refreshButton.click()
      ]);
    }
    await this.waitForMyTimesheetData();
  }

  getStatusBadge(timesheetId: number) {
    return this.page.getByTestId(`status-badge-${timesheetId}`);
  }

  async openCreateModal() {
    const createButton = this.page.getByRole('button', { name: /Create New Timesheet/i });
    await expect(createButton).toBeVisible();
    await createButton.click();
    await expect(this.page.getByText('New Timesheet Form')).toBeVisible();
  }

  async submitCreateTimesheetForm() {
    const submitButton = this.page.getByRole('button', { name: /Create Timesheet/i });
    await expect(submitButton).toBeEnabled({ timeout: 5000 });

    const createResponse = await Promise.all([
      this.page.waitForResponse((response) =>
        response.url().includes('/api/timesheets') && response.request().method() === 'POST'
      ),
      submitButton.click()
    ]).then(([response]) => response);

    if (!createResponse?.ok()) {
      const body = await createResponse?.text();
      throw new Error(`Timesheet update failed: ${updateResponse.status()} ${body ?? ''}`);
    }

    await this.waitForMyTimesheetData();
    return createResponse;
  }

  async openEditModal(timesheetId: number) {
    const editButton = this.page.getByTestId(`edit-btn-${timesheetId}`);
    await expect(editButton).toBeVisible();
    await editButton.click();
    await expect(this.page.getByText('Edit Timesheet')).toBeVisible();
  }

  async updateTimesheetForm(fields: { hours?: number; description?: string; courseId?: number; weekStartDate?: string }) {
    if (typeof fields.courseId === 'number') {
      await this.page.getByLabel('Course').selectOption(String(fields.courseId));
    }
    if (typeof fields.weekStartDate === 'string') {
      await this.page.getByLabel('Week Starting').fill(fields.weekStartDate);
    }
    if (typeof fields.hours === 'number') {
      await this.page.getByLabel('Hours Worked').fill(fields.hours.toString());
    }
    if (typeof fields.description === 'string') {
      await this.page.getByLabel('Description').fill(fields.description);
    }
  }

  async submitTimesheetForm() {
    const submitButton = this.page.getByRole('button', { name: /Update Timesheet|Create Timesheet/i });
    await expect(submitButton).toBeEnabled({ timeout: 5000 });

    const responsePromise = this.page.waitForResponse((response) => {
      const url = response.url();
      return url.includes('/api/timesheets') && response.request().method() === 'PUT';
    }, { timeout: 15000 }).catch(() => null);

    await submitButton.click();
    const updateResponse = await responsePromise;

    if (updateResponse && !updateResponse.ok()) {
      const body = await updateResponse.text().catch(() => null);
      throw new Error(Timesheet update failed:  );
    }

    await this.waitForMyTimesheetData();
  }
    await this.waitForMyTimesheetData();
  }
    }

    await this.waitForMyTimesheetData();
  }

  async submitDraft(timesheetId: number) {
    const submitButton = this.page.getByTestId(`submit-btn-${timesheetId}`);
    await expect(submitButton).toBeVisible();
    await Promise.all([
      this.page.waitForResponse((response) => response.url().includes('/api/approvals') && response.request().method() === 'POST'),
      submitButton.click()
    ]);
    await this.waitForMyTimesheetData();
  }
}


