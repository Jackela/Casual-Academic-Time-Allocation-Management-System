/**
 * Unified Layout System - Production-Ready Architecture
 * 
 * Clean, semantic CSS with no legacy code.
 * Mobile-first responsive design using design tokens.
 * 
 * Architecture:
 * - .layout-container: Page-level content wrapper with max-width
 * - .layout-grid: Vertical flexbox for main page sections
 * - .layout-hero: Header/banner area (transparent, no card styling)
 * - .layout-content: Main content grid (single-column or with sidebar)
 * - .layout-main: Primary content column
 * - .layout-sidebar: Optional sidebar column
 */

/* ============================================================================
   Container System - Consistent Max Width
   ============================================================================ */

.layout-container {
  position: relative;
  width: 100%;
  max-width: 100%;
  margin: 0 auto;
  padding-left: var(--grid-container-padding);
  padding-right: var(--grid-container-padding);
}

@media (min-width: 1024px) {
  .layout-container {
    max-width: var(--grid-container-max-width);
  }
}

/* ============================================================================
   Main Layout Grid - Vertical Sections
   ============================================================================ */

.layout-grid {
  position: relative;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  gap: var(--grid-gap-primary);
  background: hsl(var(--background));
  color: hsl(var(--foreground));
}

/* ============================================================================
   Hero/Header Section - Transparent Container
   ============================================================================ */

.layout-hero {
  position: relative;
  width: 100%;
  padding: var(--grid-hero-padding) 0;
}

/* ============================================================================
   Content Area - Responsive Grid
   ============================================================================ */

.layout-content {
  position: relative;
  width: 100%;
  display: grid;
  grid-template-columns: 1fr;
  gap: var(--grid-gap-primary);
  align-items: start;
}

/* Sidebar Layout - Two-column grid on desktop */
.layout-content.has-sidebar {
  grid-template-columns: 1fr;
}

@media (min-width: 1024px) {
  .layout-content.has-sidebar {
    grid-template-columns: minmax(0, 1fr) minmax(260px, 320px);
  }
}

@media (min-width: 1440px) {
  .layout-content.has-sidebar {
    grid-template-columns: minmax(0, 1fr) minmax(300px, 360px);
  }
}

/* ============================================================================
   Main and Sidebar Columns
   ============================================================================ */

.layout-main {
  width: 100%;
  display: flex;
  flex-direction: column;
  gap: var(--grid-gap-secondary);
}

.layout-sidebar {
  width: 100%;
  display: flex;
  flex-direction: column;
  gap: var(--grid-gap-secondary);
}

@media (min-width: 1024px) {
  .layout-sidebar {
    position: sticky;
    top: clamp(1.25rem, 2.75vw, 3rem);
    align-self: start;
  }
}

/* ============================================================================
   Alignment Utilities
   ============================================================================ */

/* Remove horizontal padding for flush alignment */
.layout-flush {
  padding-left: 0 !important;
  padding-right: 0 !important;
}

/* ============================================================================
   Numeric Display Consistency
   ============================================================================ */

.numeric-display,
.numeric-cell,
.numeric-header {
  font-variant-numeric: tabular-nums;
  font-feature-settings: 'tnum';
}

.numeric-display,
.numeric-cell {
  text-align: right;
}

.numeric-cell {
  white-space: nowrap;
}

/* ============================================================================
   Z-Index Utilities
   ============================================================================ */

.elevation-base { z-index: var(--z-base); }
.elevation-content { z-index: var(--z-content); }
.elevation-elevated { z-index: var(--z-elevated); }
.elevation-sticky { z-index: var(--z-sticky); }
.elevation-modal { z-index: var(--z-modal); }
.elevation-toast { z-index: var(--z-toast); }
