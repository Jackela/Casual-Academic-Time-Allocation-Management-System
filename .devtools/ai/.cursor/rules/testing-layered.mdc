---
description: Layered testing workflow and reporting conventions; enforce small-to-large order, selective subsets, backend readiness for E2E, and JSON reporters.
globs:
  - "scripts/test-*.js"
  - "frontend/vitest.config.ts"
  - "frontend/playwright.config.ts"
  - "frontend/playwright-ct.config.ts"
  - "frontend/e2e/**"
alwaysApply: false
---

# Project Rule â€” Layered Testing

Applies to project test scripts and test configs.

## Execution order (fail-fast by layer)
1. Backend unit
2. Backend integration (Testcontainers; H2 fallback when configured)
3. Frontend unit + contract/schema (Vitest)
4. Frontend E2E (Playwright)

- Only advance to the next layer when the current one is green.
- Prefer selective subsets (by class/pattern) during repair to shorten the feedback loop.

## Orchestration constraints
- One-shot scripts must print `[TASK_DONE]` and exit non-interactively.
- E2E must ensure backend readiness via explicit health checks before running tests; do not rely on race conditions.
- Playwright reporter is JSON-only via config; do not override via CLI when project config already sets `reporter: [['json', { outputFile: 'playwright-report/results.json' }]]`.

## Reporting locations (baseline)
- Backend JUnit XML: `build/test-results/test/`
- Backend HTML: `build/reports/tests/test/index.html`
- Backend JSON summaries: `results/ut-summary.json`, `results/it-summary.json`
- Frontend Vitest JSON: `frontend/coverage/test-results.json`
- Playwright JSON: `frontend/playwright-report/results.json`

## Selective examples
- Backend unit (subset): `node scripts/test-backend-unit-select.js --tests="*TimesheetService*"`
- Backend integration (subset): `node scripts/test-backend-integration-select.js --tests="*Timesheet*IntegrationTest*"`
- Frontend unit (pattern): `node scripts/test-frontend-unit-select.js --pattern="auth.*.spec"`

